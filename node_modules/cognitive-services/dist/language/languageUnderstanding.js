"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var commonService = require('../commonService');

/**
 * Language Understanding API is a cloud-based service that provides advanced natural language processing over raw text, and intent and entity detection.
 * Your LUIS domain-specific model must be in built, trained, and published before using this endpoint.
 * @augments commonService
 * {@link https://docs.microsoft.com/en-us/azure/cognitive-services/luis/home}
 */

var languageUnderstanding = function (_commonService) {
    _inherits(languageUnderstanding, _commonService);

    /**
     * Constructor.
     * 
     * @param {Object} obj
     * @param {string} obj.apiKey
     * @param {string} obj.endpoint
     */
    function languageUnderstanding(_ref) {
        var apiKey = _ref.apiKey,
            appID = _ref.appID,
            versionID = _ref.versionID,
            endpoint = _ref.endpoint;

        _classCallCheck(this, languageUnderstanding);

        var _this = _possibleConstructorReturn(this, _commonService.call(this, { apiKey: apiKey, endpoint: endpoint }));

        _this.versionID = versionID;
        _this.appID = appID;
        _this.serviceId = "LUIS.v2.0";
        _this.endpoints = ["westus.api.cognitive.microsoft.com", "eastus2.api.cognitive.microsoft.com", "westcentralus.api.cognitive.microsoft.com", "westeurope.api.cognitive.microsoft.com", "southeastasia.api.cognitive.microsoft.com"];
        return _this;
    }

    /**
     * Returns the detected intent, entities and entity values with a score for each intent. 
     * Scores close to 1 indicate 100% certainty that the identified intent is correct. 
     * Irrespective of the value, the intent with the highest score is returned.
     * @returns {Promise.<object>}
     */


    languageUnderstanding.prototype.detectIntent = function detectIntent(_ref2) {
        var parameters = _ref2.parameters,
            body = _ref2.body;


        var operation = {
            "path": "luis/v2.0/apps/" + this.appID,
            "method": "POST",
            "parameters": [{
                "name": "timezoneOffset",
                "description": "The timezone offset for the location of the request",
                "value": null,
                "required": false,
                "typeName": "number"
            }, {
                "name": "verbose",
                "description": "If true will return all intents instead of just the topscoring intent",
                "value": false,
                "required": false,
                "typeName": "boolean"
            }, {
                "name": "spellCheck",
                "description": "enable Bing Spell checking. You must have an Azure Bing spell checker subscription.",
                "value": false,
                "required": false,
                "typeName": "boolean"
            }, {
                "name": "staging",
                "description": "Use staging endpoint.",
                "value": false,
                "required": false,
                "typeName": "boolean"
            }, {
                "name": "log",
                "description": "Log query. Required for suggested review utterances.",
                "value": false,
                "required": false,
                "typeName": "boolean"
            }]
        };

        return this.makeRequest({
            operation: operation,
            headers: { 'Content-type': 'application/json' },
            body: body
        });
    };

    /**
     * Trains app for that version. All changes since last training are applied.
     * @returns {Promise.<object>}
     */
    languageUnderstanding.prototype.train = function train() {

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appID + "/versions/" + this.versionID + "/train",
            "method": "POST"
        };

        return this.makeRequest({
            operation: operation
        });
    };

    /**
     * Gets training status for that version. 
     * @returns {Promise.<object>}
     */
    languageUnderstanding.prototype.getTrainStatus = function getTrainStatus() {

        var operation = {
            "path": "luis/api/v2.0/apps/" + this.appID + "/versions/" + this.versionID + "/train",
            "method": "GET"
        };

        return this.makeRequest({
            operation: operation
        });
    };

    return languageUnderstanding;
}(commonService);

;

module.exports = languageUnderstanding;